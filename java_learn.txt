取模运算y%x相当于 y&(x-1)
	y       : 10110010
	x-1     : 00001111
	y&(x-1) : 00000010
	
	
自动拆箱装箱(缓存池,-127~128)
	
	Integer integer= 100与Integer integer= 100是同一对象，相当于默认调用Integer.value of(100)
	需要不同对象使用new(Integer = new Integer(100))

String pool

	java7之前存在于被放在运行时常量池中，他属于永久代，java7之后被移到堆中，这是因为永久代空间有限
	在大量使用字符串的场景下会导致OutOfMemoryError错误

final 

	生命方法不能被子类重写，在子类中定义一个与父类方法相同的签名时，子类方法不是重写，而是在子类中重写
	定义了一个新的方法，final声明的类不允许被继承

接口 static

	在jdk1.8之前，接口中的字段值必须是public static final ，方法必须是public abstract
	在jdk1.8时，接口中可以实现默认的方法，即default + fun()，fun()可以写函数主体，子类函数可以不用
	继承直接调用，fun()也可以使用static，包括主体函数，直接使用接口调用
	
集合：
	
	Set：
		TreeSet:基于红黑树操作，实现有序操作，查找效率低下，不如HashSet，HashSet的查找时间复杂度为O(1)
		TreeSet的时间复杂度是O(logN)
		
		HashSet:基于哈希表实现，支持快速查找，但是无序，失去了元素的插入信息，也就是说HashSet的Iterator的
		遍历结果不确定
		
		linkedHashSet：具有HashSet查找效率，内部使用双向链表维护插入顺序
	
	List:
		ArrayList:基于动态数组进行实现，支持随机访问
				  源码中默认的数组类型大小是10 ：
						private static final int DEFAULT_CAPACITY = 10;
				  当容量不够时使用grow()进行扩容，扩容为1.5倍：
						oldCapacity + (oldCapacity >> 1)
				  在进行扩容时，需要对整个数组进行复制，代价很高，所以最好在创建ArrayList就确定容量，在删除
				  元素时也是将index+1的所有元素前移，所以代价很高
				  
				  ArrayList 基于数组实现，并且具有动态扩容特性，因此保存元素的数组不一定都会被使用，那么就没必要全部进行序列化。
				  保存元素的数组 elementData 使用 transient 修饰，该关键字声明数组默认不会被序列化：（序列化时没有序列化数组，但是序列化了数组中的元素）
						transient Object[] elementData; // non-private to simplify nested class access
		
		Vector：线程安全的的ArrayList
				Vector 的构造函数可以传入 capacityIncrement 参数，它的作用是在扩容时使容量 capacity 增长 capacityIncrement。
				如果这个参数的值小于等于 0，扩容时每次都令 capacity 为原来的两倍。
				
				调用没有 capacityIncrement 的构造函数时，capacityIncrement 值被设置为 0，也就是说
				默认情况下 Vector 每次扩容时容量都会翻倍。
				
			Vector与ArrayList：基本使用ArrayList，可以使用 Collections.synchronizedList() 得到一个线程安全的 ArrayLis
								   List<String> list = new ArrayList<>();
								   List<String> synList = Collections.synchronizedList(list);
							   也可以使用 concurrent 并发包下的 CopyOnWriteArrayList 类
								   List<String> list = new CopyOnWriteArrayList<>();
			
		LinkedList：基于双向链表进行实现，只能顺序访问，添加删除元素快速，可以用作队列，栈，双向队列
			堆：addFirst(E e):首部添加元素（getFirst()：得到首部元素）
				addLast(E e):末尾添加元素（getLast():返回最后元素）
				pollFirst()(removeFirst):检索并删除此列表的第一个元素，如果此列表为空，则返回 null
				pollLast()(removeLast):检索并删除此列表的最后一个元素，如果此列表为空，则返回 null 
				peekFirst():检索但不删除此列表的第一个元素，如果此列表为空，则返回 null
				peekLast():检索但不删除此列表的最后一个元素，如果此列表为空，则返回 null
			栈：push(E e):将元素推送到由此列表表示的堆栈上
				pop():从此列表表示的堆栈中弹出一个元素,删除
		
	Queue:
		Linkedlist:可以实现队列
		PriorityQueue：基于堆结构实现，实现优先级队列
		
	Map：
		TreeMap：基于红黑书实现
		
		HashMap：基于哈希表实现
				内部是Entry类型的数组：
					transient Entry[] table;
				默认的capacity是16，需要注意的是 capacity 必须保证为 2 的 n 次方
				threshold表示size的临界值，当 size 大于等于 threshold 就必须进行扩容操作，默认扩容2倍。
				扩容使用 resize() 实现，需要注意的是，扩容操作同样需要把 oldTable 的所有键值对重新插入 newTable 中，因此这一步是很费时的。
				
				(在jdk1.8之后，一个桶（数组）存储的链表长度大于等于 8 时会将链表转换为红黑树)
				
		HashTable：与HashMap类似，是线程安全的，是遗留类，尽量不去使用，可以使用ConcurrentHashMap来支持
					线程安全，且ConcurrentHashMap效率更高，因为引入了分段锁
					每个 Segment 维护了一个 count 变量来统计该 Segment 中的键值对个数
					在执行 size 操作时，需要遍历所有 Segment 然后把 count 累计起来。

				    ConcurrentHashMap 在执行 size 操作时先尝试不加锁，如果连续两次不加锁操作得到的结果一致，那么可以认为这个结果是正确的。
				    尝试次数使用 RETRIES_BEFORE_LOCK 定义，该值为 2，retries 初始值为 -1，因此尝试次数为 3。
					如果尝试的次数超过 3 次，就需要对每个 Segment 加锁。
			
				Jdk1.8改动：
					JDK 1.7 使用分段锁机制来实现并发更新操作，核心类为 Segment，它继承自重入锁 ReentrantLock，并发度与 Segment 数量相等。

					JDK 1.8 使用了 CAS 操作来支持更高的并发度，在 CAS 操作失败时使用内置锁 synchronized。

					并且 JDK 1.8 的实现也在链表过长时会转换为红黑树
		
		ConcurrentHashMap:替代了HashMap，最主要的差别是 ConcurrentHashMap 采用了分段锁（Segment），每个分段锁维护着几个桶（HashEntry），
						  多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高（并发度就是 Segment 的个数）。
						  
		LinkedHashMap:使用双向链表进行维护，顺序为插入顺序或者最近最少使用(LRU)顺序为插入顺序或者最近最少使用
					  使用 LinkedHashMap 的构造函数将 accessOrder 设置为 true，开启 LRU 顺序；
					  覆盖 removeEldestEntry() 方法实现，在节点多于 MAX_ENTRIES 就会将最近最久未使用的数据移除
集合遍历：
	Collection：继承了Iterable接口，可以使用foreach遍历
	
	适配器模式：
		java.util.Array#asList可以把数组类型转换为List类型
		例如：Integer[] arr = {1,2,3};
			  List list = Array.asList(arr);
		而asList类型必须是包装类型数组，不能是基本类型数组
		
synchronized和Reentranlock
	锁的实现
		synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。

	性能
		新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。

	等待可中断
		当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。
		ReentrantLock 可中断，而 synchronized 不行。

	公平锁
		公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。
		synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。

	锁绑定多个条件
		一个 ReentrantLock 可以同时绑定多个 Condition 对象。
	
		除非需要使用 ReentrantLock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，
		JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题
		因为 JVM 会确保锁的释放
		
	wait() 和 sleep() 的区别
		wait() 是 Object 的方法，而 sleep() 是 Thread 的静态方法；
		wait() 会释放锁，sleep() 不会
		
	